# Cascaded example by using SSD-MobileNetv1 + Resnet50

axelera-model-format: 1.0.0

name: ssd-mobilenetv1-resnet50

description: Cascaded example of SSD-MobileNetv1 (COCO) + Resnet50

pipeline:
  - detections:
      model_name: SSD-MobileNetV1-COCO
      template_path: $AXELERA_FRAMEWORK/pipeline-template/ssd-tensorflow.yaml
      postprocess:
        - decode-ssd-mobilenet:
            conf_threshold: 0.4
            label_filter: bottle
        - tracker:
            algorithm: sort
  - classifications:
      model_name: ResNet50-ImageNet1K
      input:
        type: image
        source: roi
        where: SSD-MobileNetV1-COCO
        classes: bottle
        which: CENTER # AREA, SCORE, CENTER
        top_k: 10
        expand_margin: 0
      preprocess:
        - resize:
            width: 224
            height: 224
        - torch-totensor:
        - normalize:
            mean: 0.485, 0.456, 0.406
            std: 0.229, 0.224, 0.225
      postprocess:
        - topk:
            k: 1


models:
  SSD-MobileNetV1-COCO:
    class: AxONNXModel
    class_path: $AXELERA_FRAMEWORK/ax_models/base_onnx.py
    weight_path: ssd300_mobilenet_v1_modified_valid.onnx # ssd_mobilenet_v1_coco_2018_01_28.onnx
    weight_url: https://d1o2y3tc25j7ge.cloudfront.net/artifacts/weights/ssd/ssd300_mobilenet_v1_modified_valid.onnx
    weight_md5: a8dc11f8f3f3c92b9775ed9a5d8ca16a
    task_category: ObjectDetection
    input_tensor_layout: NCHW
    input_tensor_shape: [1, 3, 300, 300]
    input_color_format: RGB # RGB, BGR, Gray
    dataset: CocoDataset-COCO2017
    num_classes: 90
    extra_kwargs:
      max_compiler_cores: 4
      aipu_cores: 3
      compilation_config:
        backend_config:
          single_op_network_aicore_start_idx: 0
          single_op_network_use_ddr: True
  ResNet50-ImageNet1K:
    class: AxTorchvisionResNet
    class_path: $AXELERA_FRAMEWORK/ax_models/torchvision/resnet.py
    task_category: Classification
    input_tensor_layout: NCHW
    input_tensor_shape: [1, 3, 224, 224]
    input_color_format: RGB # RGB, BGR, Gray
    dataset: ImageNet-1K
    num_classes: 1000
    extra_kwargs:
      max_compiler_cores: 4
      aipu_cores: 1
      compilation_config:
        backend_config:
          single_op_network_use_ddr: True
          single_op_network_aicore_start_idx: 3
      torchvision_args:
        block: Bottleneck
        layers: [3, 4, 6, 3]
        torchvision_weights_args:
          object: ResNet50_Weights
          name: IMAGENET1K_V1

datasets: # Python dataloader
  CocoDataset-COCO2017:
    class: ObjDataAdaptor
    class_path: $AXELERA_FRAMEWORK/ax_datasets/objdataadapter.py
    data_dir_name: coco
    labels_path: $AXELERA_FRAMEWORK/ax_datasets/labels/coco90.names
    # If using a custom dataset, comment out download year and add either
    # repr_imgs or cal_data for calibration and add val_data for validation.
    # You can use your existing training dataset as cal_data
    download_year: 2017
    repr_imgs_dir_path: $AXELERA_FRAMEWORK/data/coco2017_400_b680128
    repr_imgs_url: https://d1o2y3tc25j7ge.cloudfront.net/artifacts/data/coco/coco2017_repr400.zip
    repr_imgs_md5: b680128512392586e3c86b670886d9fa
    # cal_data: relative/path/to/your/cal_custom.json or dir with darknet label txt files
    # val_data: relative/path/to/your/val_custom.json or dir with darknet label txt files
    format: coco90 # the decoded class follows 0-indexed COCO-90 labels
  ImageNet-1K:
    class: TorchvisionDataAdapter
    class_path: $AXELERA_FRAMEWORK/ax_datasets/torchvision.py
    data_dir_name: ImageNet
    labels_path: $AXELERA_FRAMEWORK/ax_datasets/labels/imagenet1000_clsidx_to_labels.txt
    repr_imgs_dir_path: $AXELERA_FRAMEWORK/data/coco2017_400_b680128
    repr_imgs_url: https://d1o2y3tc25j7ge.cloudfront.net/artifacts/data/coco/coco2017_repr400.zip
    repr_imgs_md5: b680128512392586e3c86b670886d9fa
