# Copyright Axelera AI, 2023

import functools

import numpy as np

# fmt: off
colormap = (
    0xff0000, 0xffb27d, 0xffffff, 0x84b9ff, 0x0009ff, 0x000088, 0x000000, 0x730000,
    0xfc0000, 0xffa46f, 0xfffdf9, 0x92c5ff, 0x081cff, 0x000096, 0x00000a, 0x650000,
    0xf10000, 0xff9561, 0xfffbee, 0xa0d1ff, 0x132eff, 0x0000a4, 0x000016, 0x570000,
    0xe50000, 0xff8653, 0xfff7e2, 0xaedbff, 0x1f41ff, 0x0000b2, 0x000022, 0x490000,
    0xd90000, 0xff7546, 0xfff2d6, 0xbce4ff, 0x2b53ff, 0x0000bf, 0x00002f, 0x3c0000,
    0xcc0000, 0xff6438, 0xffecc9, 0xc9ecff, 0x3864ff, 0x0000cc, 0x00003c, 0x2f0000,
    0xbf0000, 0xff532b, 0xffe4bc, 0xd6f2ff, 0x4675ff, 0x0000d9, 0x000049, 0x220000,
    0xb20000, 0xff411f, 0xffdbae, 0xe2f7ff, 0x5386ff, 0x0000e5, 0x000057, 0x160000,
    0xa40000, 0xff2e13, 0xffd1a0, 0xeefbff, 0x6195ff, 0x0000f1, 0x000065, 0x0a0000,
    0x960000, 0xff1c08, 0xffc592, 0xf9fdff, 0x6fa4ff, 0x0000fc, 0x000073, 0x000000,
    0x880000, 0xff0900, 0xffb984, 0xfffeff, 0x7db2ff, 0x0000ff, 0x000081, 0x000000,
    0x7a0000, 0xff0000, 0xffab76, 0xfffeff, 0x8bbfff, 0x0212ff, 0x00008f, 0x000005,
    0x6c0000, 0xf60000, 0xff9d68, 0xfffcf4, 0x99cbff, 0x0d25ff, 0x00009d, 0x000010,
    0x5e0000, 0xeb0000, 0xff8e5a, 0xfff9e8, 0xa7d6ff, 0x1938ff, 0x0000ab, 0x00001c,
    0x500000, 0xdf0000, 0xff7e4c, 0xfff5dc, 0xb5dfff, 0x254aff, 0x0000b8, 0x000028,
    0x420000, 0xd30000, 0xff6d3f, 0xffefcf, 0xc2e8ff, 0x325cff, 0x0000c6, 0x000035,
)

coolwarm = (
    0x0000FF, 0x0404FF, 0x0808FF, 0x0C0CFF, 0x1010FF, 0x1414FF, 0x1818FF, 0x1C1CFF,
    0x2020FF, 0x2424FF, 0x2828FF, 0x2C2CFF, 0x3030FF, 0x3434FF, 0x3838FF, 0x3C3CFF,
    0x4040FF, 0x4444FF, 0x4848FF, 0x4C4CFF, 0x5050FF, 0x5454FF, 0x5858FF, 0x5C5CFF,
    0x6060FF, 0x6464FF, 0x6868FF, 0x6C6CFF, 0x7070FF, 0x7474FF, 0x7878FF, 0x7C7CFF,
    0x8080FF, 0x8484FF, 0x8888FF, 0x8C8CFF, 0x9090FF, 0x9494FF, 0x9898FF, 0x9C9CFF,
    0xA0A0FF, 0xA4A4FF, 0xA8A8FF, 0xACACFF, 0xB0B0FF, 0xB4B4FF, 0xB8B8FF, 0xBCBCFF,
    0xC0C0FF, 0xC4C4FF, 0xC8C8FF, 0xCCCCFF, 0xD0D0FF, 0xD4D4FF, 0xD8D8FF, 0xDCDCFF,
    0xE0E0FF, 0xE4E4FF, 0xE8E8FF, 0xECECFF, 0xF0F0FF, 0xF4F4FF, 0xF8F8FF, 0xFCFCFF,
    0xFFFCFC, 0xFFF8F8, 0xFFF4F4, 0xFFF0F0, 0xFFECEC, 0xFFE8E8, 0xFFE4E4, 0xFFE0E0,
    0xFFDCDC, 0xFFD8D8, 0xFFD4D4, 0xFFD0D0, 0xFFCCCC, 0xFFC8C8, 0xFFC4C4, 0xFFC0C0,
    0xFFBCBC, 0xFFB8B8, 0xFFB4B4, 0xFFB0B0, 0xFFACAC, 0xFFA8A8, 0xFFA4A4, 0xFFA0A0,
    0xFF9C9C, 0xFF9898, 0xFF9494, 0xFF9090, 0xFF8C8C, 0xFF8888, 0xFF8484, 0xFF8080,
    0xFF7C7C, 0xFF7878, 0xFF7474, 0xFF7070, 0xFF6C6C, 0xFF6868, 0xFF6464, 0xFF6060,
    0xFF5C5C, 0xFF5858, 0xFF5454, 0xFF5050, 0xFF4C4C, 0xFF4848, 0xFF4444, 0xFF4040,
    0xFF3C3C, 0xFF3838, 0xFF3434, 0xFF3030, 0xFF2C2C, 0xFF2828, 0xFF2424, 0xFF2020,
    0xFF1C1C, 0xFF1818, 0xFF1414, 0xFF1010, 0xFF0C0C, 0xFF0808, 0xFF0404, 0xFF0000
)
# fmt: on


def _binary_to_rgba(color, alpha):
    return (color & 0xFF0000) >> 16, (color & 0xFF00) >> 8, (color & 0xFF), alpha


@functools.lru_cache
def get_rgba_cmap(cmap, alpha, numpy=False):
    if numpy:
        return np.array([(_binary_to_rgba(c, alpha)) for c in cmap], dtype=np.uint8)
    return [(_binary_to_rgba(c, alpha)) for c in cmap]


def get_color(class_id: int, alpha: int = 255, cmap=colormap):
    '''Get a color for the class_id, with given Alpha if present.'''
    c = cmap[class_id % len(cmap)]
    return _binary_to_rgba(c, alpha)


def get_color_float(pt, alpha: int = 255, cmap=coolwarm):
    '''Get a color from a float value in the range [0, 1], with given alpha
    if present. Values closer to zero will be mapped to earlier values in the
    color map. Values closer to 1 will be mapped closer to the end.
    '''
    c = cmap[int(pt * (len(cmap) - 1))]
    return _binary_to_rgba(c, alpha)
